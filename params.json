{"name":"Manage Chef Server","tagline":"Manage Chef Server Environments, Roles, Data Bags and Cookbooks  ","body":"Chef-Repo\r\n=========\r\n\r\nI has been some time i started working on Opscode Chef. Coming from Puppet background it has been a good experience and learning curve. I think by putting this document together, my little experience could be useful to a newbie like me to start Managing infrastructure using Opscode Chef OSS.\r\n\r\n\r\n**Sections ...**\r\n\r\n  - Install Chef Server (Open Source)\r\n  - Install Chef Client\r\n  - Setup Admin User and Knife (Chef Workstation)\r\n  - Chef Environments\r\n  - Chef Roles\r\n  - Chef Data Bags\r\n  - Chef Cookbooks / Recipes\r\n  - Git Version Controlled - Chef Repositories \r\n  - Rebuild a Chef Server\r\n  - References\r\n\r\n\r\n**Kickstart ..**\r\n\r\n\r\n\r\nIf you are new to Configuration Management System, check out below links on Opscode Chef:\r\n\r\n> https://wiki.opscode.com/display/chef/Home\r\n\r\n> http://docs.opscode.com/\r\n\r\n> http://docs.opscode.com/chef_overview.html\r\n\r\n\r\nChef documentation is very vast and some times it gets very tricky to choose a best way of doing things. Chef supports pure Ruby implementation, which means you can write your own code within Chef DSL.\r\n\r\nThere are multiple ways of doing a single thing, you can simply put everything in a cookbook using simple ruby program or you could take the benefits of roles/environments/data bags etc to write a cookbook. And if you want to get serious about creating a standard cookbook, check out [Custom LWRP] or [Custom Ruby LWRP]. \r\n\r\nIts very easy to build Chef resources without following proper standards or enough thinking, i have had this experience in past and it is not easy to go back & set things right. Before you know, it gets out of hands and you have no choice but keep going with the things as they are.\r\n\r\nLaying out Chef Environment, Role and Data Bag data attributes properly is very essential to write a proper cookbook in such a way that future addon or resource addition will be easy & could be handled with minimal effort of changing cookbook. It might not be true to every scenario but it sure does help to cover requirements like handling packages management etc. \r\n\r\nIf you are coming from puppet background, hiera is the first puzzle to sort out in Chef world. You can achieve it at many levels and many ways. \r\n\r\nVersion Controlling is another important piece when it comes to any Configuration Management System. It is what decides how fast system can recover from disaster or reverted back to last known good state. chef-repo gave a good start point towards version control. Splitting out Chef resources into different git repositories provides even more granular control. There are number of ways you can manage Chef Server via Git, the approach followed in this document is described in section \"Git Version Controlled - Chef Repositories\". \r\n\r\n\r\n> This document is an individual approach of managing \r\n> Infrastructure using Opscode Chef (Open Source). \r\n> For Chef complete documentation and reference \r\n> check out [Chef Wiki] and [Chef Docs].\r\n\r\n\r\nInstall Chef Server (Open Source)\r\n-----------\r\n\r\nChef Installation is very simple, just download the Chef server package or follow bash install method by following [chef install].\r\n\r\n```sh\r\ne.g. On RHEL bsed platform\r\n# Download Package\r\n  wget https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.8.2-1.el6.x86_64.rpm \r\n\r\n# Install Chef Server Package\r\n  rpm -ivh chef-11.8.2-1.el6.x86_64.rpm\r\n\r\n# Create/Modify Chef Server configuration file as per requirement\r\n  vim /etc/chef-server/chef-server.rb\r\n\r\n# Configure Chef Server\r\n  chef-server-ctl reconfigure\r\n```\r\n\r\n**How to Change Chef Server FQDN or SSL Certificate**\r\n\r\nTo apply internal SSL Certificates or to Change SSL Certificate / Chef Server FQDN, first modify `/etc/chef-server/chef-server.rb`:\r\n\r\n```sh\r\n  /etc/chef-server/chef-server.rb\r\n\r\napi_fqdn \"CHEF_SERVER_FQDN\"\r\nnginx['server_name']        = \"CHEF_SERVER_FQDN\"\r\nnginx['ssl_certificate']        = \"/etc/chef-server/CHEF_SERVER_FQDN.crt\"\r\nnginx['ssl_certificate_key']    = \"/etc/chef-server/CHEF_SERVER_FQDN.key\"\r\nnginx['ssl_company_name']   =   'COMPANY'\r\nnginx['ssl_country_name']   = 'COUNTRY'\r\nnginx['ssl_email_address']  =   'mail@mydomain.in'\r\nnginx['ssl_locality_name']  = 'CITY'\r\nnginx['ssl_organizational_unit_name']    = 'ORGANIZATION'\r\n#nginx['ssl_port']   = SSL_PORT # Default 443\r\nnginx['ssl_state_name'] = 'STATE'\r\n```\r\n\r\nReconfigure Chef Server by executing:\r\n\r\n```sh\r\n  chef-server-ctl reconfigure\r\n```\r\n\r\nDo not forget to run test after making any change to Chef Server:\r\n\r\n```sh\r\n  chef-server-ctl test\r\n```\r\n\r\n**Running on Amazon**\r\n\r\nIf you are running on amazon platform, you might be prone to runlist error. It might have been fixed by now in later Chef server releases in which case just ignore below section otherwise update file '/opt/chef-server/embedded/cookbooks/runit/recipes/default.rb' as a workaround.\r\n\r\n```sh\r\n# diff -u /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb.old /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb\r\n\r\n--- /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb.orig    2014-01-26 20:00:26.123165937 +0000\r\n+++ /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb.new    2014-01-26 20:03:22.030175179 +0000\r\n@@ -29,6 +29,8 @@\r\n   end\r\n when \"xenserver\"\r\n   include_recipe \"runit::upstart\"\r\n+when \"amazon\"\r\n+  include_recipe \"runit::upstart\"\r\n else\r\n   include_recipe \"runit::sysvinit\"\r\n end\r\n```\r\nBrowse https://chef_server_dns and change the default admin password. Create admin client/user for different users to setup Chef Workstation.\r\n\r\nFor more information read [chef server config].\r\n\r\nInstall Chef Client\r\n--------------\r\n\r\nJust like server, download Chef Client package or follow typical method of bash install by following [chef install].\r\n\r\nOnce Chef client package is installed, create below files to bootstrap Chef client.\r\n\r\n**Chef Client Directories**\r\n\r\n```sh\r\n# Create Chef Client Directories\r\n#\r\nmkdir /etc/chef\r\nmkdir /etc/chef/ohai\r\nmkdir /etc/chef/ohai/plugins\r\nmkdir /etc/chef/ohai/hints\r\n```\r\n\r\n```sh\r\n# File: /etc/chef/chef-validator.pem\r\n# Copy the content of chef-validator.pem file\r\n# content from server. Once chef-client \r\n# gets registered with Chef server this file is\r\n# no longer required and must be removed.\r\n```\r\n\r\n**Chef Client Config file**\r\n\r\n```sh\r\n# File: /etc/chef/client.rb\r\n# Create Chef Client Config file, below is \r\n# the minimal configuration to kick start \r\n# the client. You can modify it according\r\n# to your requirement\r\n\r\n\r\n# Server Configuration\r\nchef_server_url  \"https://{chef server url}/\"\r\nenvironment \"{environment name}\"\r\nvalidation_client_name \"chef-validator\"\r\nvalidation_key \"/etc/chef-server/chef-validator.pem\"\r\n\r\n\r\n# Client Configuration\r\nnode_name \"{chef client fqdn}\"\r\nclient_key \"/etc/chef/client.pem\"\r\nclient_registration_retries 3\r\njson_attribs \"/etc/chef/client-config.json\"\r\n\r\n# Timeout\r\nsplay 30\r\ninterval 1800\r\nrest_timeout 300\r\n\r\n# Options\r\ndiff_disabled true\r\nenable_reporting false\r\nenable_selinux_file_permission_fixup false\r\nfile_atomic_update true\r\nuser nil\r\ngroup nil\r\n\r\n# Logging\r\nverbose_logging false\r\nlog_level :info\r\nlog_location STDOUT\r\n# To Forward logs to a file:\r\n# log_location '/var/log/chef/chef-client.rb'\r\n\r\nOhai::Config[:plugin_path] << '/etc/chef/ohai/plugins'\r\n\r\nDir.glob(File.join(\"/etc/chef\", \"client.d\", \"*.rb\")).each do |conf|\r\n  Chef::Config.from_file(conf)\r\nend\r\n```\r\n\r\nFor more information read [client config] or checkout [chef-client] cookbook.\r\n\r\n**Node Custom Attributes or run_list**\r\n\r\nNode *run_list* or *client attributes* can be defined in \"/etc/chef/client-config.json\" file. \r\n\r\nNote that these variables will override any other variable defined in Cookbooks or Role, useful for first boot.\r\n\r\nIdeally use knife or Chef Console to assign roles/recipes to a node.\r\n\r\n```sh\r\n# cat /etc/chef/client-config.json\r\n\r\n{\r\n  \"run_list\": [\r\n    \"role[common_role]\",\r\n    \"role[application_role]\",\r\n    \"recipe[some_recipe]\",\r\n    \"recipe[some_recipe]\",\r\n    \"..etc\"\r\n    ],\r\n    \"application\": \"webserver\"\r\n}\r\n```\r\n\r\nYou can also define node attributes via Ohai by creating your own Ohai Plugins. \r\n\r\nOhai plugins are ruby code where you can put your logic to create custom node attributes according to your environment.\r\n\r\ne.g. File \"/etc/chef/client.rb\" has an entry:\r\n\"Ohai::Config[:plugin_path] << '/etc/chef/ohai/plugins'\" \r\n\r\nwhich tell Ohai to include plugins from location '/etc/chef/ohai/plugins' on Chef client run.\r\n\r\n```sh\r\n# cat /etc/chef/ohai/plugins/application.rb\r\nprovides \"application\"\r\napplication \"webserver\"\r\n```\r\n\r\nIf you are running on Amazon platform, ec2 hint must be present to load Ohai ec2 metadata.\r\n\r\n```sh\r\necho '{}' > /etc/chef/ohai/hints/ec2.json\r\n```\r\n\r\nFor more info read [ohai].\r\n\r\nFor Ohai plugins [ohai custom].\r\n\r\n\r\n\r\nSetup Admin User and Knife (Chef Workstation)\r\n---\r\n\r\nKnife is a Chef Management Utility. It is a set of Chef API calls and plugins to manage Chef Server. Knife can manage Chef roles, environments, data bags, cookbooks, run list, nodes and clients etc. There are some other powerful utilities available to perform same work like Berkshelf etc.\r\n\r\nTo setup a Knife Client or Workstation, user require client or user private key with admin privilege. It can be created from  Chef Console by following web document [manage auth].\r\n\r\n\r\nFor more information on Knife refer to [knife].\r\n\r\n**Knife Setup**\r\n\r\nCreate directory '~/.chef' and create knife.rb file.\r\n\r\n```sh\r\nmkdir ~/.chef\r\ntouch ~/.chef/knife.rb\r\n```\r\n\r\n```sh\r\n# cat ~/.chef/knife.rb\r\n\r\nlog_level                :info\r\nlog_location             STDOUT\r\nnode_name                'foo'\r\nclient_key               '~/.chef/foo.pem'\r\nvalidation_client_name   'foo'\r\nvalidation_key           '~/.chef/foo.pem'\r\nchef_server_url          'https://<chef server url>'\r\nsyntax_check_cache_path  '~/.chef/syntax_check_cache'\r\ncookbook_path            '~/chef-repo/cookbooks'\r\nenvironment_path         '~/chef-repo/environments'\r\ndata_bag_path            '~/chef-repo/data_bags'\r\nrole_path                '~/chef-repo/chef_roles'\r\ncookbook_copyright       'foo'\r\ncookbook_license         'apachev2'\r\ncookbook_email           'foo@foo.com'\r\n```\r\n\r\nFor more knife.rb options [knife config].\r\n\r\n**Test knife client**\r\n\r\n```sh\r\n# knife client list\r\nchef-validator\r\nchef-webui\r\nwebserver\r\n...\r\n```\r\n\r\nNow you have a Chef Workstation from where you can create/delete/modify Chef resources. Different team members can have their own client/user id to manage different chef resources.\r\n\r\n\r\nChef Environments\r\n---\r\n\r\nEnvironment concept in Chef is very simple:\r\n\r\n- environment is a simple json file or a chef dsl .rb file\r\n- useful to define default or override attributes global to roles or specific to an attribute\r\n- primary use of an environment is to define cookbooks version, Chef can have more than one version of cookbooks, you can map a cookbook version to an environment \r\n- chef default environment is _default. Unless an environment is declared in /etc/chef/client.rb or in Chef Console for a node, node by default is configured with _default environment.\r\n- you can create 'n' numbers of environments\r\n\r\nFor more information on environment read [essentials environments].\r\n\r\nIf you have multiple environments like production, stage or qa, it is always better to bootstrap the node with the respective environment instead of _default environment.\r\n\r\n**How to Create an Environment**\r\n\r\nCreating an environment using knife:\r\n\r\n```sh\r\n# knife environment create production\r\n\r\n{\r\n  \"name\": \"production\",\r\n  \"description\": \"Production Environment\",\r\n  \"cookbook_versions\": {\r\n    \"cookbook_name\": \"= 0.1.0\"\r\n  },\r\n  \"json_class\": \"Chef::Environment\",\r\n  \"chef_type\": \"environment\",\r\n  \"default_attributes\": {\r\n    \"some_default_variable\": {}\r\n  },\r\n  \"override_attributes\": {\r\n    \"some_variable_to_override\": {}\r\n  }\r\n}\r\n```\r\n\r\nThis will open up editor with default attributes. For git version controlled or to edit it manually store the content into environment.json file. Later you can modify it locally without using knife or use it to create more environments. \r\n\r\nBetter approach is to store environment.json file into a git repo. \r\n\r\nWhenever making any changes to environment.json file, commit it to git prior to Chef upload using knife.\r\n\r\n```sh\r\nknife environment from file environment.json\r\n```\r\n\r\n**Where to Use Environment JSON attributes**\r\n\r\nEnvironment is useful to define cookbooks version, environment global attributes and override roles attributes. You can have multipe cookbook versions uploaded to Chef Server and can choose which version you want to run in an environment.\r\n\r\n\r\n- environment JSON file must be kept simple, other than overriding roles attributes or global roles/cookbooks attributes try to use roles/cookbooks instead of environment\r\n\r\n- environment.json file can have attributes differs between environment, like to test new java_version, development environment can have newer version for testing, while production still running on older version\r\n\r\n- If environments shares list of common attributes, create a common role with those attributes and add it to each environment for other roles.\r\n\r\n- If you have different roles with some common attributes and you want to override some of them, use environment to override.\r\n\r\nAttribute value is just the precedence of default & override attributes spreaded acrossed cookbooks, roles and environment. But it could get complex and out of hand if not defined properly.\r\n\r\n\r\n**Where Not to Use Environment JSON attributes**\r\n\r\nThis is something that can be learnt over time, but try to avoid environment for any attributes declaration unless have to.\r\n\r\n\r\n**Environment with a Common Role - role[system]**\r\n\r\nA Common role is a simplified approach to manage common attributes, run_list for cookbooks, other roles and environments.\r\n\r\nLets create a common role 'role[system]' to store all global attributes, recipe and run_list which can be attached to other roles.\r\n\r\nAny attribute you want to declare across environments, roles or cookbooks can be defined in this common e.g. common packages, services, attributes, run_list etc.\r\n\r\n\r\nChef Roles\r\n---\r\n\r\nChef Role is a collection of attributes and run_list of roles/recipes. It is more like an application type which knows what variables needs to be declared and which recipes/roles needs to run for that application.\r\n\r\nIn a role each environment can have different run_list of roles/recipes.\r\n\r\n- role is a simple json file or chef dsl .rb file\r\n- role is used to define environment specific run_list\r\n- role can store attributes required for recipes\r\n\r\nFor more information on [essentials roles].\r\n\r\n```sh\r\n# cat jump.json\r\n\r\n{\r\n  \"name\": \"jump\",\r\n  \"description\": \"Jump / SSH Login Gateway Server\",\r\n  \"json_class\": \"Chef::Role\",\r\n  \"default_attributes\": {\r\n    \"groups\": {\r\n      \"dev\": {}\r\n    },\r\n    \"packages\": {\r\n      \"debian\": {},\r\n      \"rhel\": {}\r\n    },\r\n    \"services\": {\r\n      \"rhel\": {},\r\n      \"debian\": {}\r\n    }\r\n  },\r\n  \"override_attributes\": {},\r\n  \"chef_type\": \"role\",\r\n  \"run_list\": [],\r\n  \"env_run_lists\": {\r\n    \"production\": [\r\n      \"recipe[sshd]\",\r\n      \"role[system]\"\r\n    ],\r\n    \"development\": [\r\n      \"recipe[sshd]\",\r\n      \"role[system]\",\r\n      \"role[dev_recipe]\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n**Common Role - role[system] for all Environments/Nodes**\r\n\r\nrole[system] is a role i found very useful to use with each role or run_list of a node. \r\n\r\nIt is a default role which has all the minimum packages, services, users, file or any other resource declaration which must be setup to every node regardless of environment.\r\n\r\nJust adding role[system] to run_list of other role or node we will have our common base setup across the environments nodes.\r\n\r\n**Create a Role**\r\n\r\nTo create a role you can use blow knife command:\r\n\r\n```sh\r\nknife role create <role name>\r\n```\r\nYou can also create a .json or .rb file manually or copy from an existing one. By Creating role.json files, they can be stored in a git repo. Like environments json file we can use git to have version controlled on roles json files.\r\n\r\nOnce a role json file is created, use knife to upload to Chef server:\r\n\r\n```sh\r\nknife role from file role.json\r\n```\r\n\r\nChef Data Bags\r\n---\r\n\r\nChef Data Bags are immutable JSON Data Stores globally available for cookbooks. They are useful to store static data information or attributes, e.g. use/group/keys information. Data Bags supports encryption to store data bag json file in encrypted format.\r\n\r\nFor more information read out [essentials data bags].\r\n\r\n**Create Data Bag**\r\n\r\nA Data Bag or Data Bag Item can be created usin knife:\r\n\r\n```sh\r\nknife data bag create <data bag name>\r\nknife data bag create <data bag name> <data bag item>\r\n```\r\n\r\nData bag json file can also be created manually. As Data Bags are json files they can easily be maintained in git.\r\n\r\nTo upload Data Bag item directly from a json file:\r\n\r\n```sh\r\nknife data bag from file <data bag name> <data bag item>.json\r\n```\r\n\r\nNow the data bags are directories in git repo with different data bag item json files in it.\r\n\r\n\r\nChef Cookbooks / Recipes\r\n---\r\n\r\nCookbook is collection of recipes, attributes, templates etc. Cookbook is like Chef Ruby module to declare resources.\r\n\r\n\r\n**Create a Cookbook**\r\n\r\n```sh\r\n# knife cookbook create -o . sample_cookbook\r\n** Creating cookbook sample_cookbook\r\n** Creating README for cookbook: sample_cookbook\r\n** Creating CHANGELOG for cookbook: sample_cookbook\r\n** Creating metadata for cookbook: sample_cookbook\r\n```\r\n\r\nFor detail documentation refer to [chef cookbooks].\r\n\r\n\r\nGit Version Controlled - Chef Repositories\r\n---\r\n\r\nVersion Control is quite a different approach between Puppet and Chef. From my short experience Chef server can only be managed via tools like knife or via Console.\r\n\r\nWe can version control Chef by version controlling Chef resources.\r\n\r\nInstead of maintaing a single chef-repo repository, we can split chef-repo into different repositories:\r\n\r\n- chef_data_bags - This repository has all Chef Data Bags and Items files\r\n- chef_roles - This repository consists all the Chef roles json or .rb files\r\n- chef_environments - This repository consists all Chef environments json or .rb files\r\n- chef_cookbooks - This repository is categorized into three sub categories. Thanks to [Leknarf] post which made it easy to manage cookbooks structure.\r\n\r\n    - vendor_cookbooks - Store all public site downloaded cookbooks here\r\n    - public_cookbooks - Store In-house written cookbooks here which can be shared via github or opscode or public website, they are like vendor cookbooks but developed in-house\r\n    - private_cookbooks - Store all in-house cookbooks here which can not be shared with public\r\n    \r\n- chef_distribution - Stores any static files or small binaries files here\r\n\r\nGit access can be privileged per repository for different environment using [git acl].\r\n\r\n**Create a New Chef Role using git**\r\n\r\nCheckout chef_roles repository:\r\n```sh\r\ngit clone git@GIT_SERVER:chef_roles\r\ncd chef_roles\r\nls\r\n    jenkins.json    jump.json system.json\r\n```\r\n    \r\nCreate New role file using knife or simply copy an existing role:\r\n```sh\r\ncp jenkins.json new_role.json\r\n```\r\n\r\nModify the new role id, description, attributes etc.\r\n```sh\r\n# cat new_role.json\r\n{\r\n  \"name\": \"new_role\",\r\n  \"description\": \"New Role Description\",\r\n  \"json_class\": \"Chef::Role\",\r\n  \"default_attributes\": {},\r\n  \"override_attributes\": {},\r\n  \"chef_type\": \"role\",\r\n  \"run_list\": [],\r\n  \"env_run_lists\": {\r\n    \"production\": [\r\n    ],\r\n    \"development\": [\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nOnce created, it is always better to validate JSON syntax using a json parser. This could also be set to default in git pre-hook.\r\n\r\nPush the new role to git\r\n```sh\r\ngit add new_roles.json\r\ngit commit -m \"added new_role\"\r\ngit push\r\n```\r\n\r\nUpload new_role to Chef using knife\r\n```sh\r\nknife role from file new_role.json\r\n```\r\n\r\nAnd finally you can test the new role. \r\n\r\n\r\nRebuild a Chef Server\r\n---\r\n\r\nRebuilding a Chef Server steps are similar to steps in \"Install Chef Server\" section. \r\n\r\nBut the difference in rebuilding an existing server or adding more Chef servers is that we do not need to re-create all the cookbooks, roles, environments or data bags. We can simply use git repositories to upload resources to new Chef server.\r\n\r\nThere are few components which needs to backup regularly like Chef Server SSL Certificate bundle, Client Signed SSL Certificate Bundles etc. For this purpose one can use individual scripts to take backup of individual components or simple run backup/snapshot of whole Chef Server disk useful for disaster recovery.\r\n\r\nThere could be other things still remains un-explored for rebuilding a chef server, but it is a good start point to begin with.\r\n\r\n\r\nReferences:\r\n---\r\n\r\nhttps://wiki.opscode.com/\r\n\r\nhttp://docs.opscode.com/\r\n\r\nhttp://www.slideshare.net/opscode/\r\n\r\nhttp://leknarf.net/blog/2013/04/22/staying-sane-while-writing-chef-cookbooks/#.Us5JZ_a9aT4\r\n\r\n\r\nLicense\r\n----\r\n\r\nApache v2.0\r\n\r\n\r\n**Open Source!**\r\n\r\n[chef install]:http://www.getchef.com/chef/install/\r\n[chef cookbooks]:http://docs.opscode.com/essentials_cookbooks.html\r\n[chef server config]:http://docs.opscode.com/config_rb_chef_server.html\r\n[essentials data bags]:http://docs.opscode.com/essentials_data_bags.html\r\n[essentials roles]:http://docs.opscode.com/essentials_roles.html\r\n[essentials environments]:http://docs.opscode.com/essentials_environments.html\r\n[knife config]:http://docs.opscode.com/config_rb_knife.html\r\n[knife]:http://docs.opscode.com/knife.html\r\n[manage auth]:http://docs.opscode.com/chef/manage_server_open_source.html\r\n[client config]:http://docs.opscode.com/config_rb_client.html.\r\n[ohai]:http://docs.opscode.com/ohai.html\r\n[ohai custom]:http://docs.opscode.com/ohai_custom.html\r\n[Leknarf]:http://leknarf.net/blog/2013/04/22/staying-sane-while-writing-chef-cookbooks/#.UujOp_a6Zcx\r\n[git acl]:http://www.linuxforu.com/2011/01/gitolite-specify-complex-access-controls-git-server/\r\n[Chef Wiki]:https://wiki.opscode.com/\r\n[Chef Docs]:http://docs.opscode.com/\r\n[Custom LWRP]:http://docs.opscode.com/lwrp_custom_resource.html\r\n[Custom Ruby LWRP]:http://docs.opscode.com/lwrp_custom_provider_ruby.html\r\n[chef-client]:https://github.com/opscode-cookbooks/chef-client\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}