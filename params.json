{"name":"Chef-repo","tagline":"Chef Environment, Roles, Data Bags and Cookbooks Repositories ","body":"Chef-Repo\r\n=========\r\n\r\nI just recently started with Chef few weeks back and coming from Puppet background i had quite a good amount of Chef experience and learning curve, which i wanted to share with you folks.\r\n\r\n**Sections ...**\r\n\r\n  - Install Chef Server\r\n  - Install Chef Client\r\n  - Setup Adming User and Knife (Chef Workstation)\r\n  - Chef Environments\r\n  - Chef Roles\r\n  - Chef Data Bags\r\n  - Chef Cookbooks\r\n  - Git Version Controlled - Chef Repositories \r\n  - My Environments, Roles, Data Bags and Cookbooks\r\n\r\n**Kickstart ..**\r\n\r\nIt took me around two-to-three weeks to understand Chef architecture and start writing cookbooks with multiple environments and couple of application roles.\r\n\r\nComing from puppet background hiera was the first puzzle to figure out in Chef world. And believe me once you understand Chef Environment, Role and Data Bag, it is just matter of time to get this going.\r\n\r\nVersion Controlling was the only thing that was missing. chef-repo gave quite an idea to split Chef resources into its own git repository. There are number of ways you can manage Chef server Evironment, Role, Data Bags and Cookbooks  via Git. \r\n\r\nTo keep it simple with a fine access control it seems a good idea to have different git repositories instead of a single chef-repo.  \r\n\r\n\r\nThis could be a turorial for *newbie's* like *me* to start with Chef Installation towards Managing different Environments, Application Roles and multi version Cookbooks.\r\n\r\n\r\nInstall Chef Server (Open Source)\r\n-----------\r\n\r\nChef Instllation is as easy it can get, download the rpm or deb package or just follow typical method of bash install by following - http://www.getchef.com/chef/install/.\r\n\r\n**Customize Chef Server Details Before Setup**\r\n\r\nThis is something i am yet to explore on next Chef server build.\r\n\r\nDetails like the Chef server name, using wild card or multiple server alias certificate, domain name etc. needs to be specified before Chef server setup or it could be defined after the server setup but it should would affect existing registed clients after generating Chef Server SSL certificate bundle.\r\n\r\n\r\n**Running on Amazon**\r\n\r\nIf you are running on amazon platform, you might be prune to runlist error. It may have been fixed by now in which just ignore below section otherwise you need to update file '/opt/chef-server/embedded/cookbooks/runit/recipes/default.rb' for a workaround.\r\n\r\n```sh\r\n# diff -u /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb.old /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb\r\n\r\n--- /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb.orig    2014-01-26 20:00:26.123165937 +0000\r\n+++ /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb.new\t2014-01-26 20:03:22.030175179 +0000\r\n@@ -29,6 +29,8 @@\r\n   end\r\n when \"xenserver\"\r\n   include_recipe \"runit::upstart\"\r\n+when \"amazon\"\r\n+  include_recipe \"runit::upstart\"\r\n else\r\n   include_recipe \"runit::sysvinit\"\r\n end\r\n```\r\nBrowse https://chef_server_dns and change the default admin password. Create admin client / user for different users if required.\r\n\r\nFor more information read http://docs.opscode.com/config_rb_chef_server.html.\r\n\r\nInstall Chef Client\r\n--------------\r\n\r\nJust like server, download the rpm or deb package or just follow typical method of bash install by following - http://www.getchef.com/chef/install/.\r\n\r\nOnce Chef client package is installed, need to create some files and folders to bootstrap the chef client.\r\n\r\n**Chef Client Directories**\r\n\r\n```sh\r\n# Create Chef Client Directories\r\n#\r\nmkdir /etc/chef\r\nmkdir /etc/chef/ohai\r\nmkdir /etc/chef/ohai/plugins\r\nmkdir /etc/chef/ohai/hints\r\n```\r\n\r\n```sh\r\n# File: /etc/chef/chef-validator.pem\r\n# Copy the content of chef-validator.pem file content from server\r\n# Once chef-client gets registered with Chef server this file can be removed, a good practice is to remove this file.\r\n```\r\n\r\n**Chef Client Config file**\r\n\r\n```sh\r\n# File: /etc/chef/client.rb\r\n# Create Chef Client Config file, below is the minimal configuration to kick start the client. You can modify it according to your requirement\r\n\r\n\r\n# Server Configuration\r\nchef_server_url  \"https://{chef server url}/\"\r\nenvironment \"{environment name}\"\r\nvalidation_client_name \"chef-validator\"\r\nvalidation_key \"/etc/chef-server/chef-validator.pem\"\r\n\r\n\r\n# Client Configuration\r\nnode_name \"{chef client fqdn}\"\r\nclient_key \"/etc/chef/client.pem\"\r\nclient_registration_retries 3\r\njson_attribs \"/etc/chef/client-config.json\"\r\n\r\n# Timeout\r\nsplay 30\r\ninterval 1800\r\nrest_timeout 300\r\n\r\n# Options\r\ndiff_disabled true\r\nenable_reporting false\r\nenable_selinux_file_permission_fixup false\r\nfile_atomic_update true\r\nuser nil\r\ngroup nil\r\n\r\n# Logging\r\nverbose_logging false\r\nlog_level :info\r\nlog_location STDOUT\r\n\r\nOhai::Config[:plugin_path] << '/etc/chef/ohai/plugins'\r\n\r\n```\r\n\r\nFor more information read http://docs.opscode.com/config_rb_client.html.\r\n\r\n**Node Custom Attributes or run_list**\r\n\r\nNode *run_list* and *custom attributes* like application or cluster_name etc. node specific attributes can be defined in \"/etc/chef/client-config.json\" file. \r\n\r\nNote that these variables will override any other variable defined in Cookbooks or Role. You also could use knife or Chef Console to assign roles/recipes to a node.\r\n\r\n```sh\r\n# cat /etc/chef/client-config.json\r\n\r\n{\r\n  \"run_list\": [\r\n    \"role[common_role]\",\r\n    \"role[application_role]\",\r\n    \"recipe[some_recipe]\",\r\n    \"recipe[some_recipe]\",\r\n    \"..etc\"\r\n    ],\r\n    \"application\": \"webserver\"\r\n}\r\n```\r\n\r\nYou can also defined node attributes via Ohai by creating your own Ohai Plugins. Ohai plugin us ruby code which can have any customized custom to fetch and declare attributes according to an environment. e.g. \"Ohai::Config[:plugin_path] << '/etc/chef/ohai/plugins'\" in \"/etc/chef/client.rb\" will tell Ohai to include plugins from location '/etc/chef/ohai/plugins'.\r\n\r\n```sh\r\n# cat /etc/chef/ohai/plugins/application.rb\r\nprovides \"application\"\r\napplication \"webserver\"\r\n```\r\n\r\nIf you are running on Amazon platform, ec2 hint is to be created to load Ohai ec2 metadata plugin.\r\n\r\n```sh\r\necho '{}' > /etc/chef/ohai/hints/ec2.json\r\n```\r\n\r\nFor more info on Ohai \"http://docs.opscode.com/ohai.html\".\r\n\r\nFor Ohai plugins  \"http://docs.opscode.com/ohai_custom.html\".\r\n\r\n\r\n\r\nSetup Admin User and Knife (Chef Workstation)\r\n---\r\nKnife is a Chef Management Utilit, it has set of api calls and different plugins to manage Chef Server roles, environments, data bags, cookbooks, run list, node and client etc. Basically knife is a single utility proven to be enough to manage the Chef sever. There are some other powerful utilities too like Berkshelf to do the same thing, choice is yours!\r\n\r\nTo setup a knife client, create your admin client or user key via Chef Console by following steps in \"http://docs.opscode.com/chef/manage_server_open_source.html\".\r\n\r\nDownload the private key, this key is required to setup knife client or  Chef Workstation.\r\n\r\nFor more information on Knife \"http://docs.opscode.com/knife.html\".\r\n\r\n**Knife Setup**\r\n\r\nCreate directory '~/.chef' and create knife.rb file.\r\n\r\n```sh\r\nmkdir ~/.chef\r\ntouch ~/.chef/knife.rb\r\n```\r\n\r\n```sh\r\n# cat ~/.chef/knife.rb\r\n\r\nlog_level                :info\r\nlog_location             STDOUT\r\nnode_name                'foo'\r\nclient_key               '~/.chef/foo.pem'\r\nvalidation_client_name   'foo'\r\nvalidation_key           '~/.chef/foo.pem'\r\nchef_server_url          'https://<chef server url>'\r\nsyntax_check_cache_path  '~/.chef/syntax_check_cache'\r\ncookbook_path            '~/chef-repo/cookbooks'\r\nenvironment_path         '~/chef-repo/environments'\r\ndata_bag_path            '~/chef-repo/data_bags'\r\nrole_path                '~/chef-repo/chef_roles'\r\ncookbook_copyright       'foo'\r\ncookbook_license         'apachev2'\r\ncookbook_email           'foo@foo.com'\r\n```\r\n\r\nFor more knife.rb options \"http://docs.opscode.com/config_rb_knife.html\".\r\n\r\n**Test knife client**\r\n\r\n```sh\r\n# knife client list\r\nchef-validator\r\nchef-webui\r\nwebserver\r\n...\r\n```\r\n\r\nNow you have a Chef Workstation from where you can create/delete/modify Chef resources. Different team members can have their own client/user id to manage different chef resources.\r\n\r\n\r\nChef Environments\r\n---\r\n\r\nEnvironment concept in Chef is very simple:\r\n\r\n- environment is a simple json file or a chef dsl .rb file\r\n- useful to define default or override attributes\r\n- primary usage is to have specific version of cookbook mapped to an environment, as there can be many version of cookbook, you can map a cookbook verion to an environment \r\n- chef default environment is _default. Unless an environment is declared in /etc/chef/client.rb or in Chef Console for a node, node by default is configured with _default environment.\r\n- you can create 'n' numbers of environments\r\n\r\nFor more information on environment read out \"http://docs.opscode.com/essentials_environments.html\".\r\n\r\nIf you have multiple environments likfe production, stage or qa, it is always better to bootstrap the node with the respective environment instead of _default environment.\r\n\r\n**How to Create an Environment**\r\n\r\nCreating an environment is easy by using knife:\r\n\r\n```sh\r\n# knife environment create production\r\n\r\n{\r\n  \"name\": \"production\",\r\n  \"description\": \"Production Environment\",\r\n  \"cookbook_versions\": {\r\n    \"cookbook_name\": \"= 0.1.0\"\r\n  },\r\n  \"json_class\": \"Chef::Environment\",\r\n  \"chef_type\": \"environment\",\r\n  \"default_attributes\": {\r\n    \"some_default_variable\": {}\r\n  },\r\n  \"override_attributes\": {\r\n    \"some_variable_to_override\": {}\r\n  }\r\n}\r\n```\r\n\r\nCreate an environment.json file for the first time using knife command and later you can modify it locally without using knife or use it to create more environments. \r\n\r\nThis way you can maintain your environment json file into a git repo. Whenever needs to change push it to git prior to knife chef push. \r\n\r\nAfter making a change to an environment,json file, upload it to Chef using knife:\r\n\r\n```sh\r\nknife environment from file environment.json\r\n```\r\n\r\n**Where to Use Environment JSON attributes**\r\n\r\nEnvironment is not an easy place to define attributes. It will get out of hand before you know it.\r\n\r\nEnvironment is useful to define cookbooks version. You can have multipe cookbook versions uploaded to Chef Server. You may choose which cookbook version you want to run in an environment.\r\n\r\nIn my view Environment JSON file must be kept simple. \r\n\r\nIf there are some attributes that differs between environments and common across environment, declare them in environment.json file.\r\n\r\nIf there are some attributes common across environments, create a common role with the attributes and add to other application roles.\r\n\r\nIf you have different roles with some common attributes and you want to override some of them, use override attribute in environment.json.\r\n\r\nWhen look at the attributes, its just the predecende of default & override attributes that matters with the hierarchy of attribute value. But it could be very complex and easy at the same time if not defined at the right place, something i will have to share in some time.\r\n\r\n**Where Not to Use Environment JSON attributes**\r\n\r\nIt is very hard to put it in simple words without understanding the requirement of hierarchy flow and cookbooks design. \r\n\r\nEnvironment.json file is a very good place to make global changes to  override attributes or to define default attributes. This is something varies from one setup to another.\r\n\r\n**Environment with a Common Role**\r\n\r\nA Common role has simplified managing cookbooks, roles and environments.\r\n\r\nLets say that we have create a common role which will be attached to every other role a node will get associated with.\r\n\r\nAny attribute you want to declare across environments, roles or cookbooks can be defined here, e.g. common packages, services, attributes etc., we can declare them in a common role. e.g. role[system]\r\n\r\nChef Roles\r\n---\r\n\r\nChef Role is a place to store the attributes for a specific application/role and to define run_list for different environments.\r\n\r\n- is a simple json file or a chef dsl .rb file\r\n- a role defined run list for different environment. run_list can be list of other roles or recipes\r\n- it stores attributes required for recipes\r\n- you can have difference run_list for different environment, run_list is default run_list for _default environment.\r\n\r\nFor more information on role \"http://docs.opscode.com/essentials_roles.html\".\r\n\r\n```sh\r\n# cat jump.json\r\n\r\n{\r\n  \"name\": \"jump\",\r\n  \"description\": \"Jump / SSH Login Gateway Server\",\r\n  \"json_class\": \"Chef::Role\",\r\n  \"default_attributes\": {\r\n    \"groups\": {\r\n      \"dev\": {}\r\n    },\r\n    \"packages\": {\r\n      \"debian\": {},\r\n      \"rhel\": {}\r\n    },\r\n    \"services\": {\r\n      \"rhel\": {},\r\n      \"debian\": {}\r\n    }\r\n  },\r\n  \"override_attributes\": {},\r\n  \"chef_type\": \"role\",\r\n  \"run_list\": [],\r\n  \"env_run_lists\": {\r\n    \"production\": [\r\n      \"recipe[sshd]\",\r\n      \"role[system]\"\r\n    ],\r\n    \"development\": [\r\n      \"recipe[sshd]\",\r\n      \"role[system]\",\r\n      \"role[dev_recipe]\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n**Common Role - role[system] for all Environments/Nodes**\r\n\r\nrole[system] is a role i have created and including to every another role or run_list of a node. \r\n\r\nIt is a default role which has all the minimum packages, services, users, file or any other resource which must goes to every node regardless of node environment.\r\n\r\nJust adding role[system] to run_lits of other roles we will have our common base setup across the environemnts nodes.\r\n\r\n**Create a Role**\r\n\r\nTo create a role first time use knife and store the role to a json file as a reference to create more roles or to make changes to a role. \r\n\r\n```sh\r\nknife role create <role name>\r\n```\r\nThis way we can put the roles json files into git repo. Like environments json file we can use git to have version controlled on roles json files.\r\n\r\nOnce a role json file is stored in a git repo, make the changes to role json file and upload to Chef server using knife:\r\n\r\n```sh\r\nknife role from file role.json\r\n```\r\n\r\nChef Data Bags\r\n---\r\n\r\nChef Data Bags are JSON Data Stroes globally available for cookbooks. Data Bag is a immutable data store, primarily useful to store static data information. It also supports encryption to store data bag json file in encrypted format.\r\n\r\nData bag can be created as a chef dsl .rb file or a .json file.\r\n\r\nFor more information read out \"http://docs.opscode.com/essentials_data_bags.html\".\r\n\r\n\r\nChef Cookbooks / Recipes\r\n---\r\n\r\nCookbook is collection of recipes, attributes, tempaltes etc. Cookbook is like Chef Ruby module to declare resources.\r\n \r\n**Create Data Bag**\r\n\r\nA Data Bag or Data Bag Item can be created usin knife:\r\n\r\n```sh\r\nknife data bag create <data bag name>\r\nknife data bag create <data bag name> <data bag item>\r\n```\r\n\r\nCreate a json file from first data bag item and store it in git. Later it can be used to create an item and upload directly to Chef server.\r\n\r\nI found it very convenient to just create a data bag first using knife and later create json file manually or replciate-modify an existing one.\r\n\r\n```sh\r\nknife data bag from file <data bag name> <data bag item>.json\r\n```\r\n\r\nNow the data bag is a directory in git repo with different data bag item json files in it.\r\n\r\nGit Version Controlled - Chef Repositories\r\n---\r\n\r\nGit Versioning.\r\n\r\nHow does my Environment, Role, Data Bags & Cookbooks looks like?\r\n---\r\n\r\nApart from the usual setup, I tried to make everything configurable by JSON attributes. So that updating cookbook is not required to add package/service/user etc. \r\n\r\nTo achieve this i had to modify some of the global opscode recipes.\r\n\r\nThis may not sound sane but it really saved us time to add services/packages/users etc. \r\n\r\n\r\nReferences:\r\n---\r\n\r\nOpsCode\r\nLimburge\r\n\r\n\r\nLicense\r\n----\r\n\r\nApache v2.0\r\n\r\n\r\n**Open Source, Hell Yeah!**\r\n\r\n[john gruber]:http://daringfireball.net/\r\n[@thomasfuchs]:http://twitter.com/thomasfuchs\r\n[1]:http://daringfireball.net/projects/markdown/\r\n[marked]:https://github.com/chjj/marked\r\n[Ace Editor]:http://ace.ajax.org\r\n[node.js]:http://nodejs.org\r\n[Twitter Bootstrap]:http://twitter.github.com/bootstrap/\r\n[keymaster.js]:https://github.com/madrobby/keymaster\r\n[jQuery]:http://jquery.com\r\n[@tjholowaychuk]:http://twitter.com/tjholowaychuk\r\n[express]:http://expressjs.com\r\n\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}